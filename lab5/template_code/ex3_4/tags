!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBUG_PRINTF	dplist.c	13;"	d	file:
DEBUG_PRINTF	dplist.c	7;"	d	file:
DPLIST_ERR_HANDLER	dplist.c	17;"	d	file:
DPLIST_INVALID_ERROR	dplist.h	12;"	d
DPLIST_MEMORY_ERROR	dplist.h	10;"	d
DPLIST_NO_ERROR	dplist.h	9;"	d
_DPLIST_H_	dplist.h	2;"	d
bool	dplist.h	/^typedef enum {false, true} bool; \/\/ or use C99 #include <stdbool.h> $/;"	t	typeref:enum:__anon1
dpl_create	dplist.c	/^dplist_t *dpl_create (\/\/ callback functions$/;"	f	signature:( void * (*element_copy)(void * src_element), void (*element_free)(void ** element), int (*element_compare)(void * x, void * y) )
dpl_create	dplist.h	/^dplist_t * dpl_create (\/\/ callback functions$/;"	p	signature:( void * (*element_copy)(void * element), void (*element_free)(void ** element), int (*element_compare)(void * x, void * y) )
dpl_free	dplist.c	/^void dpl_free(dplist_t ** list)$/;"	f	signature:(dplist_t ** list)
dpl_free	dplist.h	/^void dpl_free(dplist_t ** list);$/;"	p	signature:(dplist_t ** list)
dpl_get_element_at_index	dplist.c	/^void * dpl_get_element_at_index( dplist_t * list, int index )$/;"	f	signature:( dplist_t * list, int index )
dpl_get_element_at_index	dplist.h	/^void * dpl_get_element_at_index( dplist_t * list, int index );$/;"	p	signature:( dplist_t * list, int index )
dpl_get_element_at_reference	dplist.c	/^void * dpl_get_element_at_reference( dplist_t * list, dplist_node_t * reference )$/;"	f	signature:( dplist_t * list, dplist_node_t * reference )
dpl_get_element_at_reference	dplist.h	/^void * dpl_get_element_at_reference( dplist_t * list, dplist_node_t * reference );$/;"	p	signature:( dplist_t * list, dplist_node_t * reference )
dpl_get_first_reference	dplist.c	/^dplist_node_t * dpl_get_first_reference( dplist_t * list )$/;"	f	signature:( dplist_t * list )
dpl_get_first_reference	dplist.h	/^dplist_node_t * dpl_get_first_reference( dplist_t * list );$/;"	p	signature:( dplist_t * list )
dpl_get_index_of_element	dplist.c	/^int dpl_get_index_of_element( dplist_t * list, void * element )$/;"	f	signature:( dplist_t * list, void * element )
dpl_get_index_of_element	dplist.h	/^int dpl_get_index_of_element( dplist_t * list, void * element );$/;"	p	signature:( dplist_t * list, void * element )
dpl_get_index_of_reference	dplist.c	/^int dpl_get_index_of_reference( dplist_t * list, dplist_node_t * reference )$/;"	f	signature:( dplist_t * list, dplist_node_t * reference )
dpl_get_index_of_reference	dplist.h	/^int dpl_get_index_of_reference( dplist_t * list, dplist_node_t * reference );$/;"	p	signature:( dplist_t * list, dplist_node_t * reference )
dpl_get_last_reference	dplist.c	/^dplist_node_t * dpl_get_last_reference( dplist_t * list )$/;"	f	signature:( dplist_t * list )
dpl_get_last_reference	dplist.h	/^dplist_node_t * dpl_get_last_reference( dplist_t * list );$/;"	p	signature:( dplist_t * list )
dpl_get_next_reference	dplist.c	/^dplist_node_t * dpl_get_next_reference( dplist_t * list, dplist_node_t * reference )$/;"	f	signature:( dplist_t * list, dplist_node_t * reference )
dpl_get_next_reference	dplist.h	/^dplist_node_t * dpl_get_next_reference( dplist_t * list, dplist_node_t * reference );$/;"	p	signature:( dplist_t * list, dplist_node_t * reference )
dpl_get_previous_reference	dplist.c	/^dplist_node_t * dpl_get_previous_reference( dplist_t * list, dplist_node_t * reference )$/;"	f	signature:( dplist_t * list, dplist_node_t * reference )
dpl_get_previous_reference	dplist.h	/^dplist_node_t * dpl_get_previous_reference( dplist_t * list, dplist_node_t * reference );$/;"	p	signature:( dplist_t * list, dplist_node_t * reference )
dpl_get_reference_at_index	dplist.c	/^dplist_node_t * dpl_get_reference_at_index( dplist_t * list, int index )$/;"	f	signature:( dplist_t * list, int index )
dpl_get_reference_at_index	dplist.h	/^dplist_node_t * dpl_get_reference_at_index( dplist_t * list, int index );$/;"	p	signature:( dplist_t * list, int index )
dpl_get_reference_of_element	dplist.c	/^dplist_node_t * dpl_get_reference_of_element( dplist_t * list, void * element )$/;"	f	signature:( dplist_t * list, void * element )
dpl_get_reference_of_element	dplist.h	/^dplist_node_t * dpl_get_reference_of_element( dplist_t * list, void * element );$/;"	p	signature:( dplist_t * list, void * element )
dpl_insert_at_index	dplist.c	/^dplist_t * dpl_insert_at_index(dplist_t * list, void * element, int index, bool insert_copy)$/;"	f	signature:(dplist_t * list, void * element, int index, bool insert_copy)
dpl_insert_at_index	dplist.h	/^dplist_t * dpl_insert_at_index(dplist_t * list, void * element, int index, bool insert_copy);$/;"	p	signature:(dplist_t * list, void * element, int index, bool insert_copy)
dpl_insert_at_reference	dplist.c	/^dplist_t * dpl_insert_at_reference( dplist_t * list, void * element, dplist_node_t * reference, bool insert_copy )$/;"	f	signature:( dplist_t * list, void * element, dplist_node_t * reference, bool insert_copy )
dpl_insert_at_reference	dplist.h	/^dplist_t * dpl_insert_at_reference( dplist_t * list, void * element, dplist_node_t * reference, bool insert_copy );$/;"	p	signature:( dplist_t * list, void * element, dplist_node_t * reference, bool insert_copy )
dpl_insert_sorted	dplist.c	/^dplist_t * dpl_insert_sorted( dplist_t * list, void * element, bool insert_copy )$/;"	f	signature:( dplist_t * list, void * element, bool insert_copy )
dpl_insert_sorted	dplist.h	/^dplist_t * dpl_insert_sorted( dplist_t * list, void * element, bool insert_copy );$/;"	p	signature:( dplist_t * list, void * element, bool insert_copy )
dpl_remove_at_index	dplist.c	/^dplist_t * dpl_remove_at_index( dplist_t * list, int index, bool free_element)$/;"	f	signature:( dplist_t * list, int index, bool free_element)
dpl_remove_at_index	dplist.h	/^dplist_t * dpl_remove_at_index( dplist_t * list, int index, bool free_element);$/;"	p	signature:( dplist_t * list, int index, bool free_element)
dpl_remove_at_reference	dplist.c	/^dplist_t * dpl_remove_at_reference( dplist_t * list, dplist_node_t * reference, bool free_element )$/;"	f	signature:( dplist_t * list, dplist_node_t * reference, bool free_element )
dpl_remove_at_reference	dplist.h	/^dplist_t * dpl_remove_at_reference( dplist_t * list, dplist_node_t * reference, bool free_element );$/;"	p	signature:( dplist_t * list, dplist_node_t * reference, bool free_element )
dpl_remove_element	dplist.c	/^dplist_t * dpl_remove_element( dplist_t * list, void * element, bool free_element )$/;"	f	signature:( dplist_t * list, void * element, bool free_element )
dpl_remove_element	dplist.h	/^dplist_t * dpl_remove_element( dplist_t * list, void * element, bool free_element );$/;"	p	signature:( dplist_t * list, void * element, bool free_element )
dpl_size	dplist.c	/^int dpl_size( dplist_t * list )$/;"	f	signature:( dplist_t * list )
dpl_size	dplist.h	/^int dpl_size( dplist_t * list );$/;"	p	signature:( dplist_t * list )
dplist	dplist.c	/^struct dplist {$/;"	s	file:
dplist::element_compare	dplist.c	/^  int (*element_compare)(void * x, void * y);$/;"	m	struct:dplist	file:	access:public
dplist::element_copy	dplist.c	/^  void * (*element_copy)(void * src_element);			  $/;"	m	struct:dplist	file:	access:public
dplist::element_free	dplist.c	/^  void (*element_free)(void ** element);$/;"	m	struct:dplist	file:	access:public
dplist::head	dplist.c	/^  dplist_node_t *head;$/;"	m	struct:dplist	file:	access:public
dplist_node	dplist.c	/^struct dplist_node {$/;"	s	file:
dplist_node::element	dplist.c	/^  void * element;$/;"	m	struct:dplist_node	file:	access:public
dplist_node::next	dplist.c	/^  dplist_node_t *prev, *next;$/;"	m	struct:dplist_node	file:	access:public
dplist_node::prev	dplist.c	/^  dplist_node_t *prev, *next;$/;"	m	struct:dplist_node	file:	access:public
dplist_node_t	dplist.h	/^typedef struct dplist_node dplist_node_t;$/;"	t	typeref:struct:dplist_node
dplist_t	dplist.h	/^typedef struct dplist dplist_t; \/\/ slist_t is a struct containing at least a head pointer to the start of the list; later function pointers to element_copy, element_compare, element_free, etc. will be added$/;"	t	typeref:struct:dplist
element	dplist.c	/^  void * element;$/;"	m	struct:dplist_node	file:	access:public
element_compare	dplist.c	/^  int (*element_compare)(void * x, void * y);$/;"	m	struct:dplist	file:	access:public
element_copy	dplist.c	/^  void * (*element_copy)(void * src_element);			  $/;"	m	struct:dplist	file:	access:public
element_free	dplist.c	/^  void (*element_free)(void ** element);$/;"	m	struct:dplist	file:	access:public
false	dplist.h	/^typedef enum {false, true} bool; \/\/ or use C99 #include <stdbool.h> $/;"	e	enum:__anon1
head	dplist.c	/^  dplist_node_t *head;$/;"	m	struct:dplist	file:	access:public
next	dplist.c	/^  dplist_node_t *prev, *next;$/;"	m	struct:dplist_node	file:	access:public
prev	dplist.c	/^  dplist_node_t *prev, *next;$/;"	m	struct:dplist_node	file:	access:public
true	dplist.h	/^typedef enum {false, true} bool; \/\/ or use C99 #include <stdbool.h> $/;"	e	enum:__anon1
